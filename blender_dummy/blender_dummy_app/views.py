from django.http import HttpResponse
from django.shortcuts import render
from django.contrib.staticfiles.finders import find
from PIL import Image
import io

# Your pieces_data dictionary should be here.
pieces_data = {
    'A': {
        'shape': 'A',
        'grid': [
            " A  ",
            " A  ",
            "AA  ",
        ],
        'image_path': r"blender_dummy_app\images\A-min.png",
        'rotation': 0
    },
    'B': {
        'shape': 'B',
        'grid': [
            " B  ",
            "BB  ",
            "BB  ",
        ],
        'image_path': r"blender_dummy_app\images\B-min.png",
        'rotation': 0
    },
    'C': {
        'shape': 'C',
        'grid': [
            " C  ",
            " C  ",
            " C  ",
            "CC  ",
        ],
        'image_path': r"blender_dummy_app\images\C-min.png",
        'rotation': 0
    },
    'D': {
        'shape': 'D',
        'grid': [
            " D  ",
            " D  ",
            "DD  ",
            " D  ",
        ],
        'image_path': r"blender_dummy_app\images\D-min.png",
        'rotation': 0
    },
    'E': {
        'shape': 'E',
        'grid': [
            " E  ",
            " E  ",
            "EE  ",
            "E   ",
        ]
        ,
        'image_path': r"blender_dummy_app\images\E-min.png",
        'rotation': 0
    },
    'F': {
        'shape': 'F',
        'grid': [
            "F   ",
            "FF  ",
        ],
        'image_path': r"blender_dummy_app\images\F-min.png",
        'rotation': 0
    },
    'G': {
        'shape': 'G',
        'grid': [
            "  G ",
            "  G ",
            "GGG ",
        ],
        'image_path': r"blender_dummy_app\images\G-min.png",
        'rotation': 0
    },
    'H': {
        'shape': 'H',
        'grid': [
            "  H ",
            " HH ",
            "HH  ",
        ],
        'image_path': r"blender_dummy_app\images\H-min.png",
        'rotation': 0
    },
    'I': {
        'shape': 'I',
        'grid': [
            "I I ",
            "III ",
        ],
        'image_path': r"blender_dummy_app\images\I-min.png",
        'rotation': 0
    },
    'J': {
        'shape': 'J',
        'grid': [
            " J   ",
            "JJ   ",
            " JJ  ",
        ],
        'image_path': r"blender_dummy_app\images\J-min.png",
        'rotation': 0
    },
    'K': {
        'shape': 'K',
        'grid': [
            " KK ",
            "KK  ",
        ],
        'image_path': r"blender_dummy_app\images\K-min.png",
        'rotation': 0
    },
    'L': {
        'shape': 'L',
        'grid': [
            " L  ",
            "LLL ",
        ],
        'image_path': r"blender_dummy_app\images\L-min.png",
        'rotation': 0
    },
}


def display_solution_view(request):
    def display_solution(solution_matrix, pieces_data, block_size=50):
        solution_width = len(solution_matrix[0]) * block_size
        solution_height = len(solution_matrix) * block_size
        solution_image = Image.new('RGB', (solution_width, solution_height),
                                   (255, 255, 255, 0))  # Create a transparent solution image

        for row_idx, row in enumerate(solution_matrix):
            for col_idx, piece_symbol in enumerate(row):
                if piece_symbol in pieces_data:  # Make sure the piece symbol exists in the data
                    piece_data = pieces_data[piece_symbol]
                    display_piece(piece_data, row_idx, col_idx, block_size, solution_image)

        image_io = io.BytesIO()
        solution_image.save(image_io, 'PNG')
        image_io.seek(0)
        return HttpResponse(image_io.getvalue(), content_type='image/png')

    solution_matrix = [
        ['A', 'A', 'A', 'G', 'G', 'G', 'I', 'I', 'L', 'L', 'J'],
        ['B', 'B', 'A', 'K', 'K', 'G', 'I', 'L', 'L', 'J', 'J'],
        ['B', 'B', 'K', 'K', 'D', 'G', 'I', 'I', 'L', 'H', 'J'],
        ['C', 'B', 'D', 'D', 'D', 'D', 'E', 'E', 'H', 'H', 'F'],
        ['C', 'C', 'C', 'E', 'E', 'E', 'H', 'H', 'F', 'F', 'F']
    ]

    # Call the adjusted display_solution function and return its response
    return display_solution(solution_matrix, pieces_data)


def solution_image_view(request):
    # This view renders an HTML page which includes the image generated by display_solution_view
    return render(request, 'solution_image.html')


def display_piece(piece_data, row, col, block_size, solution_image):
    # Open the image file corresponding to the piece
    with Image.open(find(piece_data['image_path'])) as piece_image:

        # Apply rotations to images
        if piece_data['rotation'] is not 0:
            piece_image = piece_image.rotate(piece_data['rotation'], expand=True)

        # Resize the image if necessary
        piece_image = piece_image.resize((block_size, block_size))

        # Calculate the position to paste the piece image, accounting for the block size
        position = (col * block_size, row * block_size)



        # Paste the piece image onto the solution image at the calculated position
        solution_image.paste(piece_image, position)  # Use mask=piece_image to handle transparency
